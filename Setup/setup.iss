; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "MPfm - Music Player for Musicians"
#define MyAppVersion "0.4.4.5 beta"
#define MyAppPublisher "Yanick Castonguay"
#define MyAppURL "http://www.mp4m.org"
#define MyAppExeName "MPfm.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{765B20F9-D4AE-4B3F-8A52-E8697A1F1A9C}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\MPfm
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
OutputBaseFilename=setup
Compression=lzma
SolidCompression=yes
LicenseFile=license.txt
WizardImageFile=MPFM_Setup.bmp
WizardSmallImageFile=MPFM_SmallSetup.bmp

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 0,6.1

[Files]
Source: "/Build/fmodex.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "/Build/MPfm.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "/Build/MPfm.Core.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "/Build/MPfm.Fonts.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "/Build/MPfm.Library.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "/Build/MPfm.Sound.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "/Build/MPfm.WindowsControls.dll"; DestDir: "{app}"; Flags: ignoreversion
;Source: "/Build/System.Data.Entity.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "/Build/System.Data.SQLite.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "/Build/System.Data.SQLite.Linq.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "/Build/taglib-sharp.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "/Build/MPFM.db"; DestDir: "{app}"; Flags: ignoreversion
Source: "/Build/license.txt"; DestDir: "{app}"; Flags: ignoreversion
Source: "/Build/lgpl-2.1.txt"; DestDir: "{app}"; Flags: ignoreversion
Source: "/Build/gpl-3.0.txt"; DestDir: "{app}"; Flags: ignoreversion
Source: "/Build/FMOD_LICENSE.TXT"; DestDir: "{app}"; Flags: ignoreversion
Source: "/Build/SIL_Open_Font_License_1.1.txt"; DestDir: "{app}"; Flags: ignoreversion
Source: "/Build/peak_readme.TXT"; DestDir: "{app}\Peak Files"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:ProgramOnTheWeb,{#MyAppName}}"; Filename: "{#MyAppURL}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: quicklaunchicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, "&", "&&")}}"; Flags: nowait postinstall skipifsilent

[Code]

var
  DefaultTop, 
  DefaultLeft, 
  DefaultHeight,
  DefaultBackTop, 
  DefaultNextTop, 
  DefaultCancelTop,
  DefaultBevelTop, 
  DefaultOuterHeight: Integer;

const 
  LicenseHeight = 600;

procedure InitializeWizard();
begin
  DefaultTop := WizardForm.Top;
  DefaultLeft := WizardForm.Left;
  DefaultHeight := WizardForm.Height;
  DefaultBackTop := WizardForm.BackButton.Top;
  DefaultNextTop := WizardForm.NextButton.Top;
  DefaultCancelTop := WizardForm.CancelButton.Top;
  DefaultBevelTop := WizardForm.Bevel.Top;
  DefaultOuterHeight := WizardForm.OuterNotebook.Height;

  WizardForm.InnerPage.Height := WizardForm.InnerPage.Height + (LicenseHeight - DefaultHeight);
  WizardForm.InnerNotebook.Height :=  WizardForm.InnerNotebook.Height + (LicenseHeight - DefaultHeight);
  WizardForm.LicensePage.Height := WizardForm.LicensePage.Height + (LicenseHeight - DefaultHeight);
  WizardForm.LicenseMemo.Height := WizardForm.LicenseMemo.Height + (LicenseHeight - DefaultHeight);
  WizardForm.LicenseNotAcceptedRadio.Top := WizardForm.LicenseNotAcceptedRadio.Top + (LicenseHeight - DefaultHeight);
  WizardForm.LicenseAcceptedRadio.Top := WizardForm.LicenseAcceptedRadio.Top + (LicenseHeight - DefaultHeight);

end;

procedure CurPageChanged(CurPageID: Integer);
begin
  if CurPageID = wpLicense then
  begin
    WizardForm.Top := DefaultTop - (LicenseHeight - DefaultHeight) div 2;
    WizardForm.Height := LicenseHeight;
    WizardForm.OuterNotebook.Height := WizardForm.OuterNotebook.Height + (LicenseHeight - DefaultHeight);
    WizardForm.CancelButton.Top := DefaultCancelTop + (LicenseHeight - DefaultHeight);
    WizardForm.NextButton.Top := DefaultNextTop + (LicenseHeight - DefaultHeight);
    WizardForm.BackButton.Top := DefaultBackTop + (LicenseHeight - DefaultHeight);
    WizardForm.Bevel.Top := DefaultBevelTop + (LicenseHeight - DefaultHeight);
  end
  else 
  begin
    WizardForm.Top := DefaultTop;
    WizardForm.Left := DefaultLeft;
    WizardForm.Height := DefaultHeight;
    WizardForm.OuterNotebook.Height := DefaultOuterHeight;
    WizardForm.CancelButton.Top := DefaultCancelTop;
    WizardForm.NextButton.Top := DefaultNextTop;
    WizardForm.BackButton.Top := DefaultBackTop;
    WizardForm.Bevel.Top := DefaultBevelTop;
  end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
  strConfig: string;
  strConfigFilePath: string;
  strConnectionString: string;
  contents: TStringList;
begin
  if CurStep = ssPostInstall then
  begin
    strConfigFilePath := ExpandConstant('{app}\MPfm.exe.config');    
    strConnectionString := ExpandConstant('    <add name="MPFM_EF" connectionString="metadata=res://*/Data.MPFM_EF.csdl|res://*/Data.MPFM_EF.ssdl|res://*/Data.MPFM_EF.msl;provider=System.Data.SQLite;provider connection string=&quot;data source={app}\MPfm.db&quot;" providerName="System.Data.EntityClient" /> ');

    if FileExists(strConfigFilePath) then begin
      MsgBox('The application configuration file (MPfm.exe.config) already exists. The file will not be modified. To reset the configuration, remove the appSettings node.', mbInformation, MB_OK);
    end
    else begin
      contents := TStringList.Create();
      contents.Append('<?xml version="1.0" ?>');
      contents.Append('<configuration>');
      contents.Append('  <runtime>');      
      contents.Append('    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">');
      contents.Append('      <dependentAssembly>');
      contents.Append('        <assemblyIdentity name="System.Data.SQLite" publicKeyToken="DB937BC2D44FF139" culture="neutral" /> ');
      contents.Append('        <bindingRedirect oldVersion="0.0.0.0-1.0.66.0" newVersion="1.0.66.0" /> ');
      contents.Append('      </dependentAssembly> ');
      contents.Append('    </assemblyBinding> ');
      contents.Append('  </runtime>');
      contents.Append('  <system.data>    ');
      contents.Append('    <DbProviderFactories>      ');
      contents.Append('      <remove invariant="System.Data.SQLite"/>     ');
      contents.Append('      <add name="SQLite Data Provider" invariant="System.Data.SQLite" description=".Net Framework Data Provider for SQLite" ');
      contents.Append('       type="System.Data.SQLite.SQLiteFactory, System.Data.SQLite" /> ' );
      contents.Append('    </DbProviderFactories> ');
      contents.Append('  </system.data> ');
      contents.Append('  <connectionStrings>');
      contents.Append('    <!-- Important: Put the exact path in "data source" or the application will crash when changing directories (SQLite bug) -->');
      contents.Append(strConnectionString);
      contents.Append('  </connectionStrings>');
      contents.Append('</configuration>');
      contents.SaveToFile(strConfigFilePath);
    end;
    
  end;
end;

